<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Windy's blog]]></title>
  <subtitle><![CDATA[Things do not happen. Things are made to happen.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://fengli632.github.io//"/>
  <updated>2015-08-28T14:48:28.205Z</updated>
  <id>http://fengli632.github.io//</id>
  
  <author>
    <name><![CDATA[Windy]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[JavaScript 数组Array]]></title>
    <link href="http://fengli632.github.io/2015/08/27/JavaScript%20%E6%95%B0%E7%BB%84Array%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    <id>http://fengli632.github.io/2015/08/27/JavaScript 数组Array相关笔记/</id>
    <published>2015-08-27T10:09:12.000Z</published>
    <updated>2015-08-28T14:48:28.205Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>因面试经常会问数组相关操作和方法,发现之前对数组的学习很不深入,这里特做一个总结,文章为《JavaScript高级程序设计》的讀書笔记.<br>涉及:Array类型的创建; 读取及设置; 检测方法; 转换方法; 栈方法; 队列方法; 重排序方法; 操作方法 位置方法;迭代及归并方法等,相信看完文章后你会对JS数组有个更加全面和深入的认识.</p>
</blockquote>
<h2 id="<!-_more_->"><a id="more"></a></h2><h3 id="Array创建方式">Array创建方式</h3><h4 id="1-_使用Array构造函数">1. 使用Array构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure>
<p>若给构造函数传递数量，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p>
<p>该数量会自动变成数组length属性的值。</p>
<p>也可以像Array构造函数传递数组中应该包含的项。如：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>创建一个包含<span class="number">3</span>项的数组，值分别为字符串<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span></span><br><span class="line"><span class="reserved">var</span> colors = <span class="keyword">new</span> Array(<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注：使用Array构造函数时也可以省略<code>new</code>操作符，如下两种方式结果相同。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="built_in">Array</span>(<span class="number">3</span>);		<span class="comment">//创建一个包含3项的数组</span></span><br><span class="line"><span class="keyword">var</span> colors = <span class="built_in">Array</span>(<span class="string">"red"</span>);	<span class="comment">//创建一个包含1项，即字符串"red"的数组</span></span><br></pre></td></tr></table></figure>
<h4 id="2-_使用数组字面量表示法">2. 使用数组字面量表示法</h4><p>数组字面量由一对包含数组项的方括号表示，多个数组之间用逗号<code>,</code>隔开<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var colors = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>]<span class="comment">;//创建一个包含3个字符串的数组</span></span><br><span class="line">var students = []<span class="comment">;                  //创建一个空数组</span></span><br><span class="line">var nums = [<span class="number">1</span>,<span class="number">2</span>,]<span class="comment">;                  //创建一个包3(IE:包含3项1,2,undefined的数组)或含2(其他浏览器)项的数组</span></span><br><span class="line">var options = [,,,,,]<span class="comment">;              //创建一个包含6(IE8之前)或5项(IE9+及其他浏览器)的数组</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注: 与对象一样,在使用数组字面量表示法时,也不会调用Array构造函数(Firefox3及更早的版本除外)</p>
</blockquote>
<hr>
<h3 id="读取和设置Array">读取和设置Array</h3><p>在读取和设置数组的值时,要使用方括号并提供相应值的基于0的数组索引,如下:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> colors</span> = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];<span class="comment">//创建一个包含3项的字符串数组</span></span><br><span class="line">alert(colors[<span class="number">0</span>]);                   <span class="comment">//显示第一项,"red"</span></span><br><span class="line">colors[<span class="number">2</span>] = <span class="string">"black"</span>;                <span class="comment">//修改第三项</span></span><br><span class="line">colors[<span class="number">3</span>] = <span class="string">"gray"</span>;                 <span class="comment">//注:此处为新增第四项</span></span><br></pre></td></tr></table></figure></p>
<p>如果方括号中索引小于数组的项数,则返回对应项的值;设置数组使用相同的方法,但会替换指定位置的值.</p>
<blockquote>
<p>注: 如果设置某个值的索引超过了数组的现有项数,如上<code>colors[3]</code>所示,数组会自动增加到该索引值加一的长度.</p>
</blockquote>
<p> 数组的<code>length</code>属性不是只读的,通过设置这个属性,可以从数组的末尾移除项或者添加新项.<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> colors</span> = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];    <span class="comment">//创建一个包含3个字符串的数组</span></span><br><span class="line">colors.length = <span class="number">2</span>;                      <span class="comment">//设置数组的长度为2</span></span><br><span class="line">alert(colors[<span class="number">2</span>]);                       <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p>
<p>如上开始常见一个含有3项的数组，后将数组的<code>length</code>设置为2，这样会移除数组的最后一项，结果再访问<code>colors[2]</code>就会显示undefined。<br>如果把length属性设置为大于数组项数的值，则新增的每一项都会取的<code>undefined</code>值。如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> colors</span> = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];    <span class="comment">//创建一个包含3个字符串的数组</span></span><br><span class="line">colors.length = <span class="number">5</span>;                      <span class="comment">//设置数组的长度为5</span></span><br><span class="line">alert(colors[<span class="number">3</span>]);                       <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>※ 利用<code>length</code>属性可以方便的在数组末尾添加新项，如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> colors</span> = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];    <span class="comment">//创建一个包含3个字符串的数组</span></span><br><span class="line">colors[colors.length] = <span class="string">"gray"</span>;         <span class="comment">//在位置【3】添加gray色</span></span><br><span class="line">colors[colors.length] = <span class="string">"white"</span>;        <span class="comment">//在位置【4】添加white色</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>由于数组的最后一项的索引时钟是<code>length-1</code>，因此下一个新项的索引就是<code>length</code>.</p>
<blockquote>
<p>注: 当把一个一个值放在超出数组大小的位置上时,数组就会重新计算其长度值,即长度值等于最后一项的索引加1,如下:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> colors</span> = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];    <span class="comment">//创建一个包含3个字符串的数组</span></span><br><span class="line">colors[<span class="number">99</span>] = <span class="string">"black"</span>;                   <span class="comment">//在位置99处创建一种颜色    </span></span><br><span class="line">alert[colors.length];                   <span class="comment">//100</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h3 id="检测数组">检测数组</h3><p>TIPS : <code>instanceof</code>  <code>Array.isArray()</code><br>对于一个网页,或者一个全局作用域而言,使用<code>instanceof</code>就可以确定某个对象是不是数组.如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(values <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">    <span class="comment">//对数组的某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但也有一些问题:如果网页中包含多个框架,实际上就是有两个或以上不同的全局执行环境,从而存在两个以上不同版本的Array构造函数.如果从一个框架向另一个框架传入一个数组,那么传入的数组与在第二个框架中的原生创建的数组分别具有各自不同的构造函数.<br>为此ECMAScrip5新增了<code>Array.isArray()</code>方法来确定一个值是不是一个数组,不管它在那个全局执行环境中创建.用法如下:<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="params">(Array.isArray<span class="params">(value)</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//对数组执行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意: <code>typeof</code>不能判断是否为Array类型, 它只适合基本数据类型,undefined,及函数类型判断,遇null失效,数组类型返回<code>&quot;object&quot;</code>.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="keyword">typeof</span> <span class="number">100</span>);              <span class="comment">//"number"</span></span><br><span class="line">alert(<span class="keyword">typeof</span> <span class="literal">true</span>);             <span class="comment">//"boolean"</span></span><br><span class="line">alert(<span class="keyword">typeof</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;));   <span class="comment">//"function"</span></span><br><span class="line">alert(<span class="keyword">typeof</span> <span class="literal">undefined</span>);        <span class="comment">//"undefined"</span></span><br><span class="line">alert(<span class="keyword">typeof</span> (<span class="keyword">new</span> <span class="built_in">Object</span>()));   <span class="comment">//"object"</span></span><br><span class="line">alert(<span class="keyword">typeof</span> ([<span class="number">1</span>,<span class="number">2</span>]));          <span class="comment">//"object"</span></span><br><span class="line">alert(<span class="keyword">typeof</span> <span class="literal">NaN</span>);              <span class="comment">//"number"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Object.prototype.toString也可以判断数组<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.apply([]);    <span class="comment">//"[object Array]";</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>更多关于数据类型监测请查看<a href="http://fengli632.github.io/">JavaScript 数据类型监测</a></p>
<hr>
<h3 id="转换方法">转换方法</h3><p>TIPS: <code>toLocaleString()</code>  <code>toString()</code> <code>valueOf()</code>  <code>join()</code></p>
<p><code>toString()</code> 方法会返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串.<br><code>valueOf()</code> 方法返回的还是数组<br><code>toLocaleString()</code>经常返回和<code>toString()</code> <code>valueOf()</code> 一样的值.不同的是:为了取得每一项的值,<br>调用的是<strong>每一项</strong>的<code>toLocaleString()</code>方法,而不是<code>toString()</code>方法.<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var colors = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</span><br><span class="line">alert<span class="params">(colors.toString<span class="params">()</span>)</span>;           <span class="comment">//red,green,blue</span></span><br><span class="line">alert<span class="params">(colors.valueOf<span class="params">()</span>)</span>;            <span class="comment">//red,green,blue</span></span><br><span class="line">alert<span class="params">(colors.toLocaleString<span class="params">()</span>)</span>;     <span class="comment">//red,green,blue</span></span><br><span class="line">alert<span class="params">(colors)</span>;                      <span class="comment">//red,green,blue</span></span><br></pre></td></tr></table></figure></p>
<p>最后一行直接<code>alert()</code>,它会在后台调用<code>toString()</code>方法.</p>
<p>以上三种方法默认以逗号分隔字符串的形式返回数组项.如果使用<code>join()</code>方法,则可以以不同的分隔符来构建字符串.如下:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</span><br><span class="line">colors.<span class="keyword">join</span>(<span class="string">","</span>);       <span class="comment">//red,green,blue       以,分隔数组项</span></span><br><span class="line">colors.<span class="keyword">join</span>(<span class="string">"||"</span>);       <span class="comment">//red||green||blue    以||分隔数组项</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="栈方法">栈方法</h3><p>TIPS: <code>push()</code>  <code>pop()</code>   </p>
<p><strong>栈</strong>: 可以限制插入和删除的数据结构,是一种<code>LIFO</code>(Last-In-First-Out <code>后进先出</code>)的数据结构.最新添加的项最早被移除.栈中项的插入(推入)和移除(弹出),只发生在一个位置-栈的顶部.</p>
<p>ECMAScrip 数组提供了一种让数组的行为类似于其他数据结构的方法,数组可以表现的像栈一样,数组专门提供了<code>push()</code>和<code>pop()</code>方法,以便实现类似栈的行为.</p>
<p><code>push()</code>: 可以接受任意数量的参数,把他们逐个添加到数组末尾,并返回修改后数组的长度.<br><code>pop()</code>: 从数组的末尾移除最后一项,减少数组的length值,返回移除的项.<br>如下:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> colors</span> = [<span class="string">"red"</span>];</span><br><span class="line"><span class="variable"><span class="keyword">var</span> count</span> = colors.push(<span class="string">"green"</span>,<span class="string">"blue"</span>);    <span class="comment">//推入两项</span></span><br><span class="line">alert(count);                               <span class="comment">//3  push返回推入后数组长度</span></span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">var</span> item</span> = colors.pop();        <span class="comment">//移除最后一项并返回该项</span></span><br><span class="line">alert(item);                    <span class="comment">//blue</span></span><br><span class="line">alert(colors.length);           <span class="comment">//2</span></span><br></pre></td></tr></table></figure></p>
<p>可以将栈方法与其他数组方法连用,可以实现不凡的效果,像下面这样:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> colors</span> = [<span class="string">"red"</span>,<span class="string">"green"</span>];</span><br><span class="line">colors.push(<span class="string">"blue"</span>);        <span class="comment">//数组末尾添加"blue"</span></span><br><span class="line">colors[<span class="number">3</span>] = <span class="string">"black"</span>;        <span class="comment">//添加一项</span></span><br><span class="line">alert(colors.length);       <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">var</span> item</span> = colors.pop();    <span class="comment">//移除末尾最后一项并返回</span></span><br><span class="line">alert(item);                <span class="comment">//black</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="队列方法">队列方法</h3><p>TIPS: </p>
<p><strong>队列</strong>: 访问规则是<code>FIFO</code>(First-In-First-Out)先进先出, 队列在列表的末尾添加项, 从列表的前端移除项.</p>
<p>push()方法是向数组的末端添加项,要模拟队列只需从数组前端取出项的方法,实现这一操作的数组方法是<code>shift()</code>, 同时还提供了<code>unshift()</code>方法.</p>
<p><code>shift()</code>: 移除数组中的第一项并返回该项,同时将数组的长度减1.<br><code>unshift()</code>: 在数组的前端添加任意项并返回新数组的长度.</p>
<p><code>shift()</code>和<code>push()</code>方法组合, 可以像队列一样使用数组.在数组的末尾添加项,前端移除项.<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var colors = new Array<span class="params">()</span>;</span><br><span class="line">var count = colors.push<span class="params">(<span class="string">"red"</span>,<span class="string">"green"</span>)</span>; <span class="comment">//推入两项</span></span><br><span class="line">alert<span class="params">(count)</span>;                           <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">count = colors.push<span class="params">(<span class="string">"blue"</span>)</span>;            <span class="comment">//推入第三项</span></span><br><span class="line">alert<span class="params">(count)</span>;                           <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">var item = colors.shift<span class="params">()</span>;              <span class="comment">//移除前端第一项并返回</span></span><br><span class="line">alert<span class="params">(item)</span>;                            <span class="comment">//red</span></span><br><span class="line">alert<span class="params">(colors.length)</span>;                   <span class="comment">//2</span></span><br></pre></td></tr></table></figure></p>
<p><code>unshift()</code>和<code>pop()</code>方法组合,可以从相反的方向来模拟队列.即在数组的前端添加项,从数组的末尾移除项.<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var colors = new Array<span class="params">()</span>;</span><br><span class="line">var count = colors.unshift<span class="params">(<span class="string">"red"</span>,<span class="string">"green"</span>)</span>;  <span class="comment">//从前端推入两项</span></span><br><span class="line">alert<span class="params">(count)</span>;                               <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">count = colors.unshift<span class="params">(<span class="string">"black"</span>)</span>;            <span class="comment">//从前端推入另一项</span></span><br><span class="line">alert<span class="params">(count)</span>;                               <span class="comment">//3</span></span><br><span class="line">alert<span class="params">(colors)</span>;                              <span class="comment">//black,red,green</span></span><br><span class="line"></span><br><span class="line">var item = colors.pop<span class="params">()</span>;                    <span class="comment">//移除末尾最后一项并返回</span></span><br><span class="line">alert<span class="params">(item)</span>;                                <span class="comment">//green</span></span><br><span class="line">alert<span class="params">(colors.length)</span>;                       <span class="comment">//2</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="重排序方法">重排序方法</h3><p>TIPS : <code>reverse()</code> <code>sort()</code></p>
<p><strong>reverse( ):</strong> 反转数组项顺序<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var values = [<span class="number">1,2,3,4</span>,5,]<span class="comment">;</span></span><br><span class="line">values.reverse()<span class="comment">;</span></span><br><span class="line">alert(values)<span class="comment">;  //5,4,3,2,1</span></span><br></pre></td></tr></table></figure></p>
<p><strong>sort( ):</strong> 按升序排列数组项,默认调用每个数组项的toString()方法,比较得到的<code>字符串</code>.</p>
<blockquote>
<p>注意: 它比较的是字符串,即便每一项都是数值也是如此.<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var values = [<span class="number">1,2,12,8</span>,26,5]<span class="comment">;</span></span><br><span class="line">values.sort()<span class="comment">;</span></span><br><span class="line">alert(values)<span class="comment">;  //1,12,2,26,5,8</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>因这种排序方式不是最佳方案,<code>sort()</code>方法可以接受一个比较函数作为参数,比较数组项的前后顺序.</p>
<ul>
<li>如果第一个值应该位于第二个值之前则返回一个负数;</li>
<li>如果两个参数相等,则返回0;</li>
<li>如果第一个参数位于第二个参数之后则返回一个整数;</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span><span class="params">(a,b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; b)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">26</span>,<span class="number">5</span>];</span><br><span class="line">values.sort(compare);</span><br><span class="line">alert(values);  <span class="comment">//1,2,5,8,12,26</span></span><br></pre></td></tr></table></figure>
<p>比较函数可以适用于大多数数据类型,通过交换比较函数返回值, 可以产生降序的结果.</p>
<blockquote>
<p>对于数值类型或者<code>valueOf()</code>方法会返回数值类型的对象类型,可以用更简便的比较函数.</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span><span class="params">(a,b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;   <span class="comment">//升序</span></span><br><span class="line">    <span class="comment">//return b - a; //降序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="操作方法">操作方法</h3><p>TIPS: <code>concat()</code> <code>slice()</code>  <code>splice()</code><br>ECMAScript为操作已经包含在数组中的项,提供了如下方法:</p>
<p><strong>concat():</strong> 基于当前数组中的所有项创建一个新数组.</p>
<ul>
<li>没有参数时,只是复制当前数组并返回副本;</li>
<li>参数时一个或多个数组,则将这些数组每一项都添加到结果数组中;</li>
<li>若传递的值不是数组,这些值简单的添加到结果数组的末尾.</li>
</ul>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>];</span><br><span class="line">var colors1 = colors.<span class="built_in">concat</span><span class="params">()</span>;</span><br><span class="line">var colors2 = colors.<span class="built_in">concat</span><span class="params">([<span class="string">"green"</span>],[<span class="string">"black"</span>,<span class="string">"white"</span>])</span>;</span><br><span class="line">var colors3 = colors.<span class="built_in">concat</span><span class="params">(<span class="string">"gray"</span>)</span>;</span><br><span class="line"></span><br><span class="line">alert<span class="params">(colors)</span>;  <span class="comment">//red,blue  注意: 原数组不变</span></span><br><span class="line">alert<span class="params">(colors1)</span>; <span class="comment">//red,blue  concat()没有参数时,只是复制原数组</span></span><br><span class="line">alert<span class="params">(colors2)</span>; <span class="comment">//red,blue,green,black,white    把传递过来的多个数组添加至原数组末尾</span></span><br><span class="line">alert<span class="params">(colors3)</span>; <span class="comment">//red,blue,gray 当传递过来的不是数组时,也会被加添到末尾.</span></span><br></pre></td></tr></table></figure>
<p><strong>slice():</strong> 基于当前数组中的一个或多个项创建一个新数组.</p>
<ul>
<li>带一个参数时,返回从该参数指定位置开始到当前数组末尾的所有项.</li>
<li>带两个参数,返回起始和结束位置之间的项,<em>不包括结束位置的项</em>.<blockquote>
<p>注意:<code>concat()</code> 方法和<code>slice()</code> 返回的都是新数组,对原数组不会有影响.</p>
</blockquote>
</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> colors</span> = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>,<span class="string">"black"</span>,<span class="string">"white"</span>];</span><br><span class="line"><span class="variable"><span class="keyword">var</span> colors1</span> = colors.slice(<span class="number">2</span>);</span><br><span class="line"><span class="variable"><span class="keyword">var</span> colors2</span> = colors.slice(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">alert(colors);  <span class="comment">//red,blue,green,black,white</span></span><br><span class="line">alert(colors1); <span class="comment">//green,black,white 返回从位置colors[2]开始到数组末尾的项</span></span><br><span class="line">alert(colors2); <span class="comment">//blue,green    返回colors[1]到colors[3]之间的项,但不包括colors[3]="black"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意: 如果slice()方法的参数中有负数, 则用数组长度加上该数来确定相应的位置,如:以上数组包含5项,调用slice(-3,-1)与slice(2,4)效果相同.<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert<span class="list">(<span class="keyword">colors</span>.slice<span class="list">(<span class="keyword">-3</span>,<span class="number">-1</span>)</span>)</span><span class="comment">; //green black</span></span><br></pre></td></tr></table></figure></p>
<p>若结束位置小于其实位置,则返回空数组.</p>
</blockquote>
<p><strong>splice():</strong>这是最强大的数组方法!主要用途是向数组中部插入向.使用方法有一下三种</p>
<ul>
<li><p>[x] <strong>删除</strong>: 删除任意数量的项.2个参数: 要删除的第一项的位置和要删除的项数.<br>  例:<code>splice(0,2)</code> 会删除数组中的前两项.</p>
</li>
<li><p>[x] <strong>插入</strong>:向指定位置插入任意数量的项.3个参数:起始位置;0(要删除的项数);要插入的项,如果要插入更多的项,依次添加到第四第五以至更多的的参数.<br>例: <code>splice(1,0,&quot;red&quot;,&quot;black&quot;)</code>,会从当前数组位置1开始插入字符串<code>&quot;red&quot;,&quot;black&quot;</code>.</p>
</li>
<li>[x] <strong>替换</strong>:向指定位置插入任意数量的项,同时删除任意数量的项.3个参数:起始位置; 删除的项数; 要插入的任意数量的项.插入的项数不必与删除的项数相等.<br>例:<code>splice(2,1,&quot;orange&quot;,&quot;rose&quot;)</code>,会删除数组位置为2的项并从位置2开始插入<code>&quot;orange&quot;,&quot;rose&quot;</code>.</li>
</ul>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var colors = [<span class="string">"gray"</span>,<span class="string">"white"</span>,<span class="string">"yellow"</span>,<span class="string">"gold"</span>];</span><br><span class="line">var removed = colors.splice<span class="params">(<span class="number">0</span>,<span class="number">2</span>)</span>;   <span class="comment">//从0位置开始删除两项</span></span><br><span class="line"></span><br><span class="line">alert<span class="params">(colors)</span>;  <span class="comment">//yellow,gold</span></span><br><span class="line">alert<span class="params">(removed)</span>; <span class="comment">//gray,white    返回删除的项</span></span><br><span class="line"></span><br><span class="line">removed = colors.splice<span class="params">(<span class="number">1</span>,<span class="number">0</span>,<span class="string">"red"</span>,<span class="string">"black"</span>)</span>; <span class="comment">//从1位置开始删除0项插入两项</span></span><br><span class="line">alert<span class="params">(colors)</span>;  <span class="comment">//yellow,red,black,gold</span></span><br><span class="line">alert<span class="params">(removed)</span>; <span class="comment">//空数组</span></span><br><span class="line"></span><br><span class="line">removed = colors.splice<span class="params">(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"orange"</span>,<span class="string">"rose"</span>)</span>;   <span class="comment">//从位置2开始删除1项,插入两项</span></span><br><span class="line">alert<span class="params">(colors)</span>;  <span class="comment">//yellow,red,orange,rose,gold</span></span><br><span class="line">alert<span class="params">(removed)</span>; <span class="comment">//black 返回删除的项</span></span><br></pre></td></tr></table></figure>
<p><code>splice()</code>方法始终都会有一个返回的数组,该数组中包含从原始数组中删除的项(若没有删除任何项,则返回空数组).</p>
<hr>
<h3 id="位置方法">位置方法</h3><p>TIPS: <code>indexOf()</code> <code>lastIndexOf()</code></p>
<p><code>indexOf()</code> 和 <code>lastIndexOf()</code>都接受两个参数:要查找的项和表示起点位置的索引(可选,没有的话默认从数组开头查到末尾).<br><code>indexOf()</code>方法从数组的开头(位置0)开始向后查找,<code>lastIndexOf()</code>从数组的末尾开始向前查找.<br>两个方法都返回要查找的项在数组中的位置,如果没有找到则返回-1;比较第一个参数与数组中每一项时,会使用全等<code>===</code>操作符,必须要查找的项和第一个参数是严格相等.例如下:<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var nums = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>];</span><br><span class="line">alert<span class="params">(nums.indexOf<span class="params">(<span class="number">3</span>)</span>)</span>;         <span class="comment">//2</span></span><br><span class="line">alert<span class="params">(nums.lastIndexOf<span class="params">(<span class="number">3</span>)</span>)</span>;     <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">alert<span class="params">(nums.indexOf<span class="params">(<span class="number">9</span>,<span class="number">2</span>)</span>)</span>;       <span class="comment">//3</span></span><br><span class="line">alert<span class="params">(nums.lastIndexOf<span class="params">(<span class="number">9</span>,<span class="number">2</span>)</span>)</span>;   <span class="comment">//-1 因为是从位置2往前查询,位置2之前已经没有9,所以返回-1</span></span><br><span class="line">alert<span class="params">(nums.lastIndexOf<span class="params">(<span class="number">9</span>,<span class="number">5</span>)</span>)</span>;   <span class="comment">//3</span></span><br></pre></td></tr></table></figure></p>
<p>同样可以用来查找对象等其他类型.<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var student = &#123;name: <span class="string">"tom"</span>&#125;;</span><br><span class="line">var <span class="keyword">person</span> = <span class="comment">[&#123;name: "tome"&#125;]</span>;</span><br><span class="line"></span><br><span class="line">var morePerson = <span class="comment">[student]</span>;</span><br><span class="line"></span><br><span class="line">alert(<span class="keyword">person</span>.indexOf(student));     //-1</span><br><span class="line">alert(morePerson.indexOf(student)); //0</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="迭代方法">迭代方法</h3><p>TIPS: <code>every()</code> <code>filter()</code> <code>forEach()</code> <code>map()</code> <code>some()</code></p>
<p>ECMAScript定义了5个迭代方法.每个方法接受两个参数:要在每一项上运行的函数;运行该函数的作用域对象-影响this的值(可选参数).<br>传入运行函数都会接受三个参数:数组项的值;该项在数组中的位置;数组对象本身.<br>5个方法都不会修改原数组中的包含的值.</p>
<ul>
<li>[ ] <strong>every():</strong> 对数组中每一项运行给定函数,如果该函数对每一项都返回true,则放回true.</li>
<li>[ ] <strong>filter():</strong> 对数组中每一项运行给定函数,返回该函数会返回true的项组成的数组.  </li>
<li>[ ] <strong>forEach():</strong> 对数组中每一项运行给定函数,没有返回值.</li>
<li>[ ] <strong>map():</strong> 对数组中每一项运行给定函数, 返回每次函数调用的结果组成的数组.</li>
<li>[ ] <strong>some():</strong> 对数组中每一项运行给定函数, 如果该函数对任一项返回true,则返回true.</li>
</ul>
<p><strong>every()</strong>和<strong>some()</strong>比较相似.<br><code>every()</code>方法:传入的函数必须对每一项都返回true,这个方法才返回true;<br><code>some()</code>方法:只要传入的函数对数组中的某一项返回true,则<code>some()</code>方法返回true.<br>例如下:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> everyResult = nums.every(<span class="function"><span class="keyword">function</span><span class="params">(item,index,arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(everyResult); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someResult = nums.some(<span class="function"><span class="keyword">function</span><span class="params">(item,index,arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(someResult);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p><strong>filter()</strong>利用指定的函数确定是否在返回的数组中包含某一项.例:要返回一个所有值都大于2的数组.<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> filterResult = nums.filter(<span class="function"><span class="keyword">function</span><span class="params">(item,<span class="keyword">index</span>,arr)</span><span class="comment">&#123;</span><br><span class="line">    return (item &gt; 4);</span><br><span class="line">&#125;</span>)</span><br><span class="line"><span class="title">alert</span><span class="params">(filterResult)</span>;</span>    <span class="comment">//6,15,9</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>因面试经常会问数组相关操作和方法,发现之前对数组的学习很不深入,这里特做一个总结,文章为《JavaScript高级程序设计》的讀書笔记.<br>涉及:Array类型的创建; 读取及设置; 检测方法; 转换方法; 栈方法; 队列方法; 重排序方法; 操作方法 位置方法;迭代及归并方法等,相信看完文章后你会对JS数组有个更加全面和深入的认识.</p>
</blockquote>
<h2 id="<!-_more_->">]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://fengli632.github.io/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://fengli632.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015/07/09 mark]]></title>
    <link href="http://fengli632.github.io/2015/07/09/2015-07-09-note/"/>
    <id>http://fengli632.github.io/2015/07/09/2015-07-09-note/</id>
    <published>2015-07-09T05:09:19.000Z</published>
    <updated>2015-07-09T05:26:38.739Z</updated>
    <content type="html"><![CDATA[<p>Things do not happen. Things are made to happen.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Things do not happen. Things are made to happen.</p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用hexo搭建博客]]></title>
    <link href="http://fengli632.github.io/2015/07/08/my-new-post/"/>
    <id>http://fengli632.github.io/2015/07/08/my-new-post/</id>
    <published>2015-07-08T02:57:43.000Z</published>
    <updated>2015-07-09T03:20:14.643Z</updated>
    <content type="html"><![CDATA[<h2 id="hexo介绍">hexo介绍</h2><p>hexo是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。作者是来自台湾的<a href="https://github.com/tommy351/hexo" target="_blank" rel="external">@tommy351</a>。类似于jekyll、Octopress、Wordpress，我们可以用hexo创建自己的博客，托管到github或Heroku上，绑定自己的域名，用markdown写文章。</p>
<a id="more"></a>
<blockquote>
<ul>
<li>风一般的速度<br>Hexo基于Node.js，支持多进程，几百篇文章也可以秒生成。</li>
<li>流畅的撰写<br>支持GitHub Flavored Markdown和所有Octopress的插件。</li>
<li>扩展性<br>Hexo支持EJS、Swig和Stylus。通过插件支持Haml、Jade和Less.</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="hexo介绍">hexo介绍</h2><p>hexo是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。作者是来自台湾的<a href="https://github.com/tommy351/hexo">@tommy351</a>。类似于jekyll、Octopress、Wordpress，我们可以用hexo创建自己的博客，托管到github或Heroku上，绑定自己的域名，用markdown写文章。</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://fengli632.github.io/tags/hexo/"/>
    
      <category term="随笔" scheme="http://fengli632.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[百度前端技术学院笔记-JavaScript]]></title>
    <link href="http://fengli632.github.io/2015/07/06/ife-js/"/>
    <id>http://fengli632.github.io/2015/07/06/ife-js/</id>
    <published>2015-07-06T05:09:19.000Z</published>
    <updated>2015-07-10T14:04:20.818Z</updated>
    <content type="html"><![CDATA[<h2 id="1-_JavaScript基础">1. JavaScript基础</h2><h3 id="1-1_了解JavaScript是什么">1.1 了解JavaScript是什么</h3><p>JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。</p>
<a id="more"></a>
<h4 id="组成部分">组成部分</h4><ul>
<li>ECMAScript，描述了该语言的语法和基本对象。</li>
<li>文档对象模型（DOM），描述处理网页内容的方法和接口。</li>
<li>浏览器对象模型（BOM），描述与浏览器进行交互的方法和接口。</li>
</ul>
<h3 id="1-2_如何在HTML页面加载JavaScript代码">1.2 如何在HTML页面加载JavaScript代码</h3><ul>
<li><p>使用<code>&lt;script&gt;</code>标签容纳JavaScript代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   init();</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用&lt; script src=”xxx.js”&gt;&lt; /script&gt;外链方式引入</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"js/main.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>html界面元素直接赋与一段 JavaScript 代码<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="variable">type=</span><span class="string">"button"</span> <span class="variable">name=</span><span class="string">"Button"</span> <span class="variable">value=</span><span class="string">"Button"</span> <span class="variable">onclick=</span><span class="string">"javascript：alert('测试')"</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="1-3_为什么要把&lt;_script&gt;放在&lt;_/body&gt;前面？">1.3 为什么要把&lt; script&gt;放在&lt; /body&gt;前面？</h3><ul>
<li><p>script标签放在底部的好处：<br>虽然理论上放在哪里都是可以的，但是对于前端页面优化来讲，还是放在底部是最佳的，因为如果JS执行出现错误了，最起码页面中的元素还能加载出来，因为DOM文档是从上往下的顺序执行的。如果还不了解DOM的加载顺序，请阅读<a href="http://www.uw3c.com/jsviews/js15.html" target="_blank" rel="external">jQuery中ready与load事件的区别</a>。<br><strong>DOM文档加载的顺序:</strong></p>
<blockquote>
<p>(1) 解析HTML结构。<br>(2) 加载外部脚本和样式表文件。<br>(3) 解析并执行脚本代码。<br>(4) 构造HTML DOM模型。//ready<br>(5) 加载图片等外部文件。<br>(6) 页面加载完毕。//load</p>
</blockquote>
<p><strong>ready事件：</strong><br>ready事件在DOM结构绘制完成之后就绘执行。这样能确保就算有大量的媒体文件没加载出来，JS代码一样可以执行。<br><strong>load事件：</strong><br>load事件必须等到网页中所有内容全部加载完毕之后才被执行。如果一个网页中有大量的图片的话，则就会出现这种情况：网页文档已经呈现出来，但由于网页数据还没有完全加载完毕，导致load事件不能够即时被触发。<br><strong>区别：</strong><br>其实如果页面中要是没有图片之类的媒体文件的话ready与load是差不多的，但是页面中有文件就不一样了，所以还是推荐大家在工作中用ready。</p>
</li>
<li>应该放在底部的哪里：<br>许多人认为只要放在底部了，无论是“body标签闭合之前”还是在“body标签闭合之后”都是一样的，其实还是有差别的，<br>因为从HTML 2.0起放在“body标签闭合之后”就是不合标准的。之所以但是浏览器却不会报错，是因为如果在“body标签闭合之后”后再出现script或任何元素的开始标签， 都是parseerror，浏览器会忽略之前的，即视作仍旧在body内。所以实际效果和写在“body标签闭合之前”之前是没有区别的。<br>所以，只要是让浏览器做了多余的事都是不好的，虽然差别细微，但是咱们还是按照标准来，放在<strong>body标签闭合之前</strong>。</li>
</ul>
<h3 id="1-4_参考资料：JavaScript的性能优化：加载和执行">1.4 参考资料：<a href="http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html" target="_blank" rel="external">JavaScript的性能优化：加载和执行</a></h3><h2 id="2-_JavaScript数据类型及语言基础">2. JavaScript数据类型及语言基础</h2><h3 id="2-1_任务描述">2.1 任务描述</h3><h4 id="JavaScript数据类型（七种）：">JavaScript数据类型（七种）：</h4><p>字符串、数字、布尔、数组、对象、Null、Undefined<br>参考资料：<a href="http://www.w3school.com.cn/js/js_datatypes.asp" target="_blank" rel="external">W3school JavaScript数据类型</a></p>
<h4 id="2-1-1_判断各种数据类型的方法：">2.1.1 判断各种数据类型的方法：</h4><h5 id="数据类型判断之_typeof">数据类型判断之 <code>typeof</code></h5><p><code>typeof</code>可以解决大部分的数据类型判断，是一个一元运算，放在一个运算值之前，其返回值为一个字符串，该字符串说明运算数的类型，所以判断某个是否为String类型，可以直接 <code>if(typeof(你的值) == &quot;string&quot;){}</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="string">"string"</span>; <span class="built_in">console</span>.log(a); <span class="comment">//string</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>; <span class="built_in">console</span>.log(a); <span class="comment">//number</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="literal">false</span>; <span class="built_in">console</span>.log(a); <span class="comment">//boolean</span></span><br><span class="line"><span class="keyword">var</span> a; <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//undfined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>; <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//object</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>; <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//object</span></span><br><span class="line"><span class="keyword">var</span> a = []; <span class="built_in">console</span>.log(a); <span class="comment">//object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">//function   除了可以判断数据类型还可以判断function类型</span></span><br></pre></td></tr></table></figure></p>
<p>这样一来就很明显了，除了前四个类型外，null、对象、数组返回的都是<code>object</code>类型；对于函数类型返回的则是<code>function</code>，再比如<code>typeof(Date)</code>，<code>typeof(eval)</code>等。然后这里就可以再引申出另一个灰常热门并且解决方法已普遍存在的问题，如何判断数据是个数组类型？</p>
<h5 id="js判断数组类型的方法">js判断数组类型的方法</h5><h6 id="方法一：_instanceof">方法一： <code>instanceof</code></h6><p><code>instance</code>，故名思义，实例，例子，所以<code>instanceof</code> 用于判断一个变量是否某个对象的实例，是一个三目运算式—-和<code>typeof</code>最实质上的区别<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a instanceof b?alert<span class="params">(<span class="string">"true"</span>)</span>:alert<span class="params">(<span class="string">"false"</span>)</span> <span class="comment">//注意b值是你想要判断的那种数据类型，不是一个字符串，比如Array</span></span><br></pre></td></tr></table></figure></p>
<h6 id="方法二：_constructor">方法二： <code>constructor</code></h6><p>在W3C定义中的定义：<code>constructor</code> 属性返回对创建此对象的数组函数的引用就是返回对象相对应的构造函数。从定义上来说跟<code>instanceof</code>不太一致，但效果都是一样的如:<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="literal">a</span> instanceof Array)   //<span class="literal">a</span>是否Array的实例？<span class="literal">true</span> <span class="literal">or</span> <span class="literal">false</span></span><br><span class="line">(<span class="literal">a</span>.constructor == Array)  // <span class="literal">a</span>实例所对应的构造函数是否为Array? <span class="literal">true</span> <span class="literal">or</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p><strong>注意：</strong><br>使用instaceof和construcor,被判断的array必须是在当前页面声明的！比如，一个页面（父页面）有一个框架，框架中引用了一个页面（子页面），在子页面中声明了一个array，并将其赋值给父页面的一个变量，这时判断该变量，Array == object.constructor;会返回false；<br>原因：<br>1、array属于引用型数据，在传递过程中，仅仅是引用地址的传递。<br>2、每个页面的Array原生对象所引用的地址是不一样的，在子页面声明的array，所对应的构造函数，是子页面的Array对象；父页面来进行判断，使用的Array并不等于子页面的Array；切记，不然很难跟踪问题！</p>
<h6 id="方法三：最简单Object-prototype-toString-call">方法三：最简单<code>Object.prototype.toString.call</code></h6><p>ECMA中对<code>Object.prototype.toString</code>的解释：</p>
<blockquote>
<p>Object.prototype.toString( )<br>1.If the this value is undefined, return “[object Undefined]”.<br>2.If the this value is null, return “[object Null]”.<br>3.Let O be the result of calling ToObject passing the this value as the argument.<br>4.Let class be the value of the [[Class]] internal property of O.<br>5.Return the String value that is the result of concatenating the three Strings “[object “, class, and “]”.</p>
</blockquote>
<p>即当<code>toString()</code>方法调用时: </p>
<blockquote>
<p>1.如果this的值为undefined,则返回”[object Undefined]”.<br>2.如果this的值为null,则返回”[object Null]”.<br>3.让O成为调用ToObject(this)的结果.<br>4.让class成为O的内部属性[[Class]]的值.<br>5.返回三个字符串”[object “, class, 以及 “]”连接后的新字符串.</p>
</blockquote>
<p>ECMA中对Array有如下说明：</p>
<blockquote>
<p>The [[Class]] property of the newly constructed object is set to “Array”.</p>
</blockquote>
<p>因此我们用如下方式来检测数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">'[object Array]'</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这种方式既解决了<code>instanceof</code>存在的跨页面问题，也解决了属性检测方式所存在的问题，是一个很好的解决方案。<br>除此之外，这种解决办法也可以应用于判断<code>Date</code>,<code>Function</code>等类型的对象。<br>附:ES5可以直接使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray" target="_blank" rel="external">Array.isArray()</a>来判断.<br><strong>参考资料:</strong><br>MDN对 说明:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString" target="_blank" rel="external">MDN-Object.prototype.toString()</a><br>ECMA5.1说明: <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.2" target="_blank" rel="external">ECMA5.1-Object.prototype.toString() </a><br>最新的ES6对<code>Object.prototype.toString()</code>的说明有所增加:<a href="http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring" target="_blank" rel="external">ES6-Object.prototype.toString()</a>.不过变化不大,有兴趣的读者可以细看.</p>
<h5 id="js判断函数类型方法">js判断函数类型方法</h5><p>参考上面的方法,可以使用<code>Object.propotype.toString.call</code>来判断目标对象是否为函数.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断fn是否为一个函数，返回一个bool值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.propotype.toString.call(fn) === <span class="string">"[object Function]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关于<code>==</code>和<code>===</code>的区别,参见 :<a href="http://fxk2006.iteye.com/blog/768260" target="_blank" rel="external">javascript ==和===的区别</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-_JavaScript基础">1. JavaScript基础</h2><h3 id="1-1_了解JavaScript是什么">1.1 了解JavaScript是什么</h3><p>JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。</p>]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://fengli632.github.io/tags/Javascript/"/>
    
      <category term="前端" scheme="http://fengli632.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>